[{"content":"Simple analog clock using React JS (React Hooks)\nDemo\nSource Code\nCreate react app This will create a folder called my-app and will start a developing server for this project.\nnpx create-react-app my-app cd my-app npm start Clean App.js Open App.js and remove unnecessary code.\nApp.js\nimport './App.css'; function App() { return ( \u0026lt;div className=\u0026quot;App\u0026quot;\u0026gt; \u0026lt;header className=\u0026quot;App-header\u0026quot;\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;/div\u0026gt; ); } export default App; Add React Hooks App.js\n import { useEffect, useRef, useState } from 'react'; import './App.css'; function App() { const hourHand = useRef(); const minHand = useRef(); const secHand = useRef(); const [timestamp, setTimestamp] = useState(\u0026quot;\u0026quot;); return ( \u0026lt;div className=\u0026quot;App\u0026quot;\u0026gt; \u0026lt;header className=\u0026quot;App-header\u0026quot;\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;/div\u0026gt; ); } export default App;  Add Clock Function This function will calculate the angle of each clock hand and assign them.\nApp.js\n import { useEffect, useRef, useState } from 'react'; import './App.css'; function App() { const hourHand = useRef(); const minHand = useRef(); const secHand = useRef(); const [timestamp, setTimestamp] = useState(\u0026quot;\u0026quot;); function runClock() { const d = new Date(); //object of date() const hr = d.getHours(); const min = d.getMinutes(); const sec = d.getSeconds(); const hr_rotation = 30 * hr + min / 2; //converting current time const min_rotation = 6 * min; const sec_rotation = 6 * sec; setTimestamp(d); hourHand.current.style.transform = `rotate(${hr_rotation}deg)`; minHand.current.style.transform = `rotate(${min_rotation}deg)`; secHand.current.style.transform = `rotate(${sec_rotation}deg)`; } return ( \u0026lt;div className=\u0026quot;App\u0026quot;\u0026gt; \u0026lt;header className=\u0026quot;App-header\u0026quot;\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;/div\u0026gt; ); } export default App;  Run at first render Use useEffect to run the Clock Function in the first render and every next few miliseconds, so it updates the clock hands.\nApp.js\n import { useEffect, useRef, useState } from 'react'; import './App.css'; function App() { const hourHand = useRef(); const minHand = useRef(); const secHand = useRef(); const [timestamp, setTimestamp] = useState(\u0026quot;\u0026quot;); function runClock() { const d = new Date(); //object of date() const hr = d.getHours(); const min = d.getMinutes(); const sec = d.getSeconds(); const hr_rotation = 30 * hr + min / 2; //converting current time const min_rotation = 6 * min; const sec_rotation = 6 * sec; setTimestamp(d); hourHand.current.style.transform = `rotate(${hr_rotation}deg)`; minHand.current.style.transform = `rotate(${min_rotation}deg)`; secHand.current.style.transform = `rotate(${sec_rotation}deg)`; } useEffect(() =\u0026gt; { runClock(); setInterval(runClock, 300); }, []); return ( \u0026lt;div className=\u0026quot;App\u0026quot;\u0026gt; \u0026lt;header className=\u0026quot;App-header\u0026quot;\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;/div\u0026gt; ); } export default App;  Add JSX (structure) App.js\n import { useEffect, useRef, useState } from 'react'; import './App.css'; function App() { const hourHand = useRef(); const minHand = useRef(); const secHand = useRef(); const [timestamp, setTimestamp] = useState(\u0026quot;\u0026quot;); function runClock() { const d = new Date(); //object of date() const hr = d.getHours(); const min = d.getMinutes(); const sec = d.getSeconds(); const hr_rotation = 30 * hr + min / 2; //converting current time const min_rotation = 6 * min; const sec_rotation = 6 * sec; setTimestamp(d); hourHand.current.style.transform = `rotate(${hr_rotation}deg)`; minHand.current.style.transform = `rotate(${min_rotation}deg)`; secHand.current.style.transform = `rotate(${sec_rotation}deg)`; } useEffect(() =\u0026gt; { runClock(); setInterval(runClock, 300); }, []); return ( \u0026lt;div className=\u0026quot;App\u0026quot;\u0026gt; \u0026lt;header className=\u0026quot;App-header\u0026quot;\u0026gt; \u0026lt;div className=\u0026quot;clock\u0026quot;\u0026gt; \u0026lt;span ref={hourHand} className=\u0026quot;hour\u0026quot;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span ref={minHand} className=\u0026quot;min\u0026quot;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span ref={secHand} className=\u0026quot;sec\u0026quot;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;\u0026lt;code\u0026gt;{timestamp.toString()}\u0026lt;/code\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;/div\u0026gt; ); } export default App;  Add CSS Replace App.css with:\nbody { margin: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } code { font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace; } .App { text-align: center; } .App-logo { height: 40vmin; pointer-events: none; } .App-header { background-color: #162c57; min-height: 100vh; display: flex; flex-direction: column; align-items: center; justify-content: center; font-size: calc(10px + 2vmin); color: white; } .App-link { color: #61dafb; } .clock { width: 350px; height: 350px; display: flex; justify-content: center; align-items: center; background: url(\u0026quot;/public/clock.png\u0026quot;); background-size: cover; border: 4px solid #091921; border-radius: 50%; box-shadow: 0px 0px 50px red; position: relative; } .clock::before { content: ''; width: 15px; height: 15px; background: #777; border-radius: 50%; z-index: 100; } .hour { position: absolute; bottom: 175px; height: 95px; width: 10px; background-color: #777777; transform-origin: bottom center; transform: rotate(0deg); } .min { position: absolute; bottom: 175px; height: 120px; width: 7px; background-color: #777777; transform-origin: bottom center; transform: rotate(0deg); } .sec { position: absolute; bottom: 150px; height: 167px; width: 3px; background-color: red; transform-origin: center 142px; transform: rotate(0deg); } Add Clock background image Save this image inside the public folder as clock.png. Download\nEnd result Demo\nSource Code\nHave fun ðŸ˜„\n","permalink":"https://skillsboy.github.io/blog/posts/analog-clock-using-reactjs/","summary":"Simple analog clock using React JS (React Hooks)\nDemo\nSource Code\nCreate react app This will create a folder called my-app and will start a developing server for this project.\nnpx create-react-app my-app cd my-app npm start Clean App.js Open App.js and remove unnecessary code.\nApp.js\nimport './App.css'; function App() { return ( \u0026lt;div className=\u0026quot;App\u0026quot;\u0026gt; \u0026lt;header className=\u0026quot;App-header\u0026quot;\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;/div\u0026gt; ); } export default App; Add React Hooks App.js\n import { useEffect, useRef, useState } from 'react'; import '.","title":"Analog Clock Using ReactJS"},{"content":"Need a free domain? Here you will find out how to get one for 12 months with unlimited renewals completly free.\nGreat for developing or private use.\nAvailable top-level domains  .tk .ga .cf .ml .gq  Sign in Sign in with one of their options (google, facebook, \u0026hellip;)\nfreenom sign in\nCheck if your wanted domain is available Select the ones you want Click Get it now! to add them to the cart.\nChoose as many as you want.\nCheckout After selecting the domains you want go to Checkout\nFree period time Select from the dropdown the maximum free time (mÃ¡x. 12 months).\nThen Continue\nComplete free order Agree on the Terms \u0026amp; Conditions and Complete Order\nYour domains To see your domains go to Services\u0026ndash;\u0026gt;My Domains\nAnd then you will see all your purchased domains.\nWhere you can manage each domain by clicking Manage Domain\nRenew Domain If you still need your domain after 12 months, you can renew it but this is only possible 14 days or less before the expiry date.\nJust go to Services\u0026ndash;\u0026gt;Renew Domains and there is an option to renew your domain.\nðŸ˜„ðŸ˜„ðŸ˜„\n","permalink":"https://skillsboy.github.io/blog/posts/free-domain/","summary":"Need a free domain? Here you will find out how to get one for 12 months with unlimited renewals completly free.\nGreat for developing or private use.\nAvailable top-level domains  .tk .ga .cf .ml .gq  Sign in Sign in with one of their options (google, facebook, \u0026hellip;)\nfreenom sign in\nCheck if your wanted domain is available Select the ones you want Click Get it now! to add them to the cart.","title":"Free Domain"},{"content":"Here I\u0026rsquo;m going to show you how to push all the content of a folder from the main branch to another branch called gh-pages.\nUsefull for deploying specific files and not the whole project on github pages.\nCommands These commands are all run from the main branch.\n1. Add\ngit add . 2. Commit\ngit commit -m \u0026#34;commit message\u0026#34; 3. Subtree\ngit subtree push -P public origin gh-pages  -P (prefix) flag is the folders content that will be pushed, in this case the public. origin will be the main branch where the public folder is. gh-pages is the branch where the public folders contents will be pushed to.  Basically this will push everything inside the public folder from the main branch (origin) to the gh-pages branch.\n","permalink":"https://skillsboy.github.io/blog/posts/push-folders-content-to-another-git-branch/","summary":"Here I\u0026rsquo;m going to show you how to push all the content of a folder from the main branch to another branch called gh-pages.\nUsefull for deploying specific files and not the whole project on github pages.\nCommands These commands are all run from the main branch.\n1. Add\ngit add . 2. Commit\ngit commit -m \u0026#34;commit message\u0026#34; 3. Subtree\ngit subtree push -P public origin gh-pages  -P (prefix) flag is the folders content that will be pushed, in this case the public.","title":"Push Folders Content to Another Git Branch"},{"content":"This tutorial is going to show you how to build a Website with Hugo.\nGreat for a Personal Portfolio or a Blog.\nRequirements  Hugo  Create a new hugo site 1. New site\nhugo new site websiteName -f \u0026#34;yaml\u0026#34;  websiteName is the name of the site that is going to be created. -f flag is so instead of the default toml we use yaml for our config and for the markdown front matter.  This will create a folder called websiteName with the following structure.\n â”œâ”€â”€ archetypes\nâ”œâ”€â”€ config.yaml\nâ”œâ”€â”€ content\nâ”œâ”€â”€ data\nâ”œâ”€â”€ layouts\nâ”œâ”€â”€ static\nâ””â”€â”€ themes\n Add a theme 1. Change directory\ncd websiteName cd themes 2. Download theme\n~websiteName/themes/ %\ngit clone https://github.com/adityatelange/hugo-PaperMod.git A hugo-PaperMod folder will be created inside the themes, themes can be found here.\n3. Now we have to activate it. To do that go back to the projects root.\n~websiteName/themes/ %\ncd .. 4. Activate\nOpen config.yaml.\nAdd:\ntheme: hugo-PaperMod Test local site 1. Test\n~websiteName/ %\nhugo server -D  -D flag will include all posts marked as draft: true in there front matter.  This will create a live server.\n2. Navigate with your browser to the given url.\nBuild static files for production 1. Add baseURL\nOpen config.yaml.\nChange:\nbaseURL: https://yourDomain.com Add your domain, this has to be done because when hugo generates the static files it may use absolute paths.\n2. Build static files\n~websiteName/ %\nhugo This will create a folder called public in the projects root, where all the static files will be generated.\n3. Copy /public/*\nNow just copy those files, from inside the public folder, to your webserver and you will be able to see the default page from the chosen theme.\nHave fun ðŸ˜„\n","permalink":"https://skillsboy.github.io/blog/posts/build-a-website-with-hugo/","summary":"This tutorial is going to show you how to build a Website with Hugo.\nGreat for a Personal Portfolio or a Blog.\nRequirements  Hugo  Create a new hugo site 1. New site\nhugo new site websiteName -f \u0026#34;yaml\u0026#34;  websiteName is the name of the site that is going to be created. -f flag is so instead of the default toml we use yaml for our config and for the markdown front matter.","title":"Build a Website With Hugo"},{"content":"This is my first post.\n","permalink":"https://skillsboy.github.io/blog/posts/first-post/","summary":"This is my first post.","title":"First Post"}]